'use strict';

const axios = require('axios');
const cheerio = require('cheerio');
const michelin = require('./michelin');
const sandbox_package=require('./sandbox.js');
const fs = require('fs'); //to export data
const readline = require('readline'); //to readfiles / import datas




//  --------- BIb RESTAURATEURS ---------


async function fetchBibList(url){ //test function to fetch restaurants url in a result page
const res=await sandbox_package.sandboxBibList(url); 
console.log(res);
console.log(res.web_links.length);
return res;
}
// fetchBibList('https://guide.michelin.com/fr/fr/restaurants/bib-gourmand/page/2');


async function bibUrlList(){ //fetch all the url from restaurant wich are bib and store them in a json file

	// const numberOfResults=fetchPageBibList('https://guide.michelin.com/fr/fr/restaurants/bib-gourmand/');
	const numberOfResults=await sandbox_package.sandboxPageBibList();  
	const numberOfPage=Math.floor(numberOfResults/20);
	console.log("pages="+numberOfPage);
	const urlBeginning="https://guide.michelin.com/fr/fr/restaurants/bib-gourmand/page/";
	var i,url,restaurant, restaurantURL;
	var bibURLList=[];
	for (i = 1; i < (numberOfPage+2); i++) {
	// for (i = 1; i < 2; i++) {
		// console.log(url.concat(i.toString()));
		url=urlBeginning.concat(i.toString());
		// console.log(url);
		restaurantURL= await sandbox_package.sandboxBibList(url);
		// bibURLList.push(restaurantURL.web_link);
		bibURLList=bibURLList.concat(restaurantURL.web_links);
		console.log(restaurantURL.web_links.length);
	}
	console.log(bibURLList.length);


	// export in JSON
	fs.writeFile('./files/BibRestaurantsURL.json', JSON.stringify(bibURLList,null,2), (err) => {
	    if (err) throw err;
	    console.log('Data written to file');
	});




	// to export in a txt file for example:
	// fs.writeFile("./files/BibRestaurantsURL.txt", bibURLList, function(err) {
 //    if(err) {
 //        return console.log(err);
 //    }
 //    console.log("The file was saved!");
	// }); 




	//Now let's fetch all the url one by one
	// for (i = 1; i < 3; i++) {
	// 	url=;
	// 	restaurant=await sandbox_package.sandboxRestaurant(url); 
 //  		bibList.push(restaurant);
		
	// }
	
	// console.log(bibList);
	
}
// bibUrlList();



async function fetchBib(url){  //test function to fetch only one restaurant
const res=await sandbox_package.sandboxRestaurant(url); 
console.log(res);
return res;
}
// fetchBib('https://guide.michelin.com/fr/fr/auvergne-rhone-alpes/nris-les-bains/restaurant/cote-toques');

async function bibList(){ //fetch all the restaurants one by one using the json file generated by bibUrlList()

	// import the url
	let rawdata = fs.readFileSync('./files/BibRestaurantsURL.json');
	let url = JSON.parse(rawdata);
	// console.log(url.length);
	var i,restaurant;
	var bibList=[];
	//Now let's fetch all the url one by one
	// for (i = 0; i < 3; i++) {
	for (i = 0; i < url.length; i++) {
		restaurant=await sandbox_package.sandboxRestaurant(url[i]); 
  		bibList.push(restaurant);	
	}


	// export in JSON
	fs.writeFile('./files/BibRestaurants.json', JSON.stringify(bibList,null,2), (err) => {
	    if (err) throw err;
	    console.log('Data written to file');
	});

	
}
// bibList();




//  --------- MAITRES RESTAURATEURS ---------


async function fetchMaitresRestaurateursURLList(){ // fetch and store all url of maitre restaurateurs pages

const numberOfResults=await sandbox_package.sandboxResultsMaitresRestaurateursList(); 
const numberOfPage=Math.ceil(numberOfResults/10); //we use ceil cause because the last page could not be filled entirely (and floor would have give us a the largest integer less than or equal to the division)
console.log("pages="+numberOfPage);

var i,restaurantURL;
var maitresRestaurateursURLList=[];
for (i = 1; i < numberOfPage+ 1 ; i++) //1 page was missing...
{
	restaurantURL=await sandbox_package.sandboxMaitresRestaurateursList(i); 
	maitresRestaurateursURLList=maitresRestaurateursURLList.concat(restaurantURL.web_links);
	// console.log(restaurantURL.web_links.length);
}
console.log(maitresRestaurateursURLList.length);


// export in JSON
fs.writeFile('./files/MaitresRestaurateursRestaurantsURL.json', JSON.stringify(maitresRestaurateursURLList,null,2), (err) => {
    if (err) throw err;
    console.log('Data written to file');
});
}
// fetchMaitresRestaurateursURLList();



async function fetchMaitresRestaurateurs(){ //test function to fetch only one restaurant
// const res=await sandbox_package.sandboxMaitresRestaurateurs(); 
const res=await sandbox_package.sandboxMaitresRestaurateurs('https://www.maitresrestaurateurs.fr/profil/31'); 
console.log(res);
return res;
}
// fetchMaitresRestaurateurs();


async function fetchMaitresRestaurateursList(){ //fetch all the restaurants one by one using the json file generated by fetchMaitresRestaurateursURLList()

	// import the url
	let rawdata = fs.readFileSync('./files/MaitresRestaurateursRestaurantsURL.json');
	let url = JSON.parse(rawdata);
	// console.log(url.length);
	var i,restaurant;
	var maitresRestaurateursList=[];
	//Now let's fetch all the url one by one
	// for (i = 0; i < 2; i++) {
	for (i = 0; i < url.length; i++) {
		restaurant=await sandbox_package.sandboxMaitresRestaurateurs(url[i]); 
  		maitresRestaurateursList.push(restaurant);	
	}


	// export in JSON
	fs.writeFile('./files/MaitresRestaurateursRestaurants.json', JSON.stringify(maitresRestaurateursList,null,2), (err) => {
	    if (err) throw err;
	    console.log('Data written to file');
	});

	
}
// fetchMaitresRestaurateursList();


//  --------- DATAS COMPARISON ---------

function compareJSON(){
	// import the datas
  	let rawdata = fs.readFileSync('./files/MaitresRestaurateursRestaurants.json');
  	let maitresRestaurateursRestaurants= JSON.parse(rawdata);
  	rawdata = fs.readFileSync('./files/BibRestaurants.json');
  	let  bibRestaurants= JSON.parse(rawdata);
  	var i,j;
  	let restaurants=[];
  	for (i = 0; i < maitresRestaurateursRestaurants.length; i++) {
		for (j = 0; j < bibRestaurants.length; j++) {
			if (typeof bibRestaurants[j].tel != "undefined"){ //to avoid errors
				if((bibRestaurants[j].tel.split(" ").join("")==maitresRestaurateursRestaurants[i].tel_mobile) || (bibRestaurants[j].tel.split(" ").join("")==maitresRestaurateursRestaurants[i].tel_square)
				|| (bibRestaurants[j].name.localeCompare(maitresRestaurateursRestaurants[i].name, 'fr', {sensitivity: 'base'})==0) 
				|| (bibRestaurants[j].street.localeCompare(maitresRestaurateursRestaurants[i].street, 'fr', {sensitivity: 'base'})==0)) 
				{
					var ok=true;
					var rest=bibRestaurants[j];
					restaurants.forEach(element => 
					{
						if(element==rest)
							ok=false
					})
					if(ok){
						restaurants.push(rest);	
					}	
				}
			}
		}
	}
	// console.log(restaurants);
	console.log(restaurants.length);

	// export in JSON
	fs.writeFile('./files/MaitresBibRestaurants.json', JSON.stringify(restaurants,null,2), (err) => {
	    if (err) throw err;
	    console.log('Data written to file');
	});
}
compareJSON();





